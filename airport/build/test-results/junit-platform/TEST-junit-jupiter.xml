<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="JUnit Jupiter" tests="53" skipped="0" failures="0" errors="0" time="11.667" hostname="anatoliy-TravelMate-5744" timestamp="2018-03-12T23:14:05">
<properties>
<property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
<property name="file.encoding" value="UTF-8"/>
<property name="file.encoding.pkg" value="sun.io"/>
<property name="file.separator" value="/"/>
<property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
<property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
<property name="java.class.path" value="/home/anatoliy/IdeaProjects/tellus/tellus/airport/build/classes/java/test:/home/anatoliy/IdeaProjects/tellus/tellus/airport/build/resources/test:/home/anatoliy/IdeaProjects/tellus/tellus/airport/build/classes/java/main:/home/anatoliy/IdeaProjects/tellus/tellus/airport/build/resources/main:/home/anatoliy/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.196/dd0034398d593aa3588c6773faac429bbd9aea0e/h2-1.4.196.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/mysql/mysql-connector-java/5.1.6/380ef5226de2c85ff3b38cbfefeea881c5fce09d/mysql-connector-java-5.1.6.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-engine/5.1.0/c54b96b465bb5b49c7708d734a4180dd95422754/junit-jupiter-engine-5.1.0.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.assertj/assertj-core/3.3.0/fbd73ef6253e365c21a56b0c83a2dfc6ddad8f11/assertj-core-3.3.0.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-library/1.3/4785a3c21320980282f9f33d0d1264a69040538f/hamcrest-library-1.3.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.mockito/mockito-all/1.10.19/539df70269cc254a58cccc5d8e43286b4a73bf30/mockito-all-1.10.19.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-engine/1.1.0/2596bd4d909e7ea8d029272db4338075445d731b/junit-platform-engine-1.1.0.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-api/5.1.0/370218fbc7ce9cf0600c4b5db400bccdf0c01a48/junit-jupiter-api-5.1.0.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-commons/1.1.0/d6aa21029f9cedfb4cc8a9e9efc0bd97987205b8/junit-platform-commons-1.1.0.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.apiguardian/apiguardian-api/1.0.0/3ef5276905e36f4d8055fe3cb0bdcc7503ffc85d/apiguardian-api-1.0.0.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.opentest4j/opentest4j/1.0.0/6f09c598e9ff64bf0ce2fa7e7de49a99ba83c0b4/opentest4j-1.0.0.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-console/1.1.0/1ea376db54ab4ec0018c5e99d414e1c7c034387/junit-platform-console-1.1.0.jar:/home/anatoliy/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-launcher/1.1.0/ba098edde4e59cacd9225e238ea3ad9c946684ab/junit-platform-launcher-1.1.0.jar"/>
<property name="java.class.version" value="53.0"/>
<property name="java.home" value="/usr/lib/jvm/java-9-oracle"/>
<property name="java.io.tmpdir" value="/tmp"/>
<property name="java.library.path" value="/home/anatoliy/IDEAUltimate/idea-IU-172.4343.14/bin::/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib"/>
<property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
<property name="java.runtime.version" value="9.0.4+11"/>
<property name="java.specification.name" value="Java Platform API Specification"/>
<property name="java.specification.vendor" value="Oracle Corporation"/>
<property name="java.specification.version" value="9"/>
<property name="java.vendor" value="Oracle Corporation"/>
<property name="java.vendor.url" value="http://java.oracle.com/"/>
<property name="java.vendor.url.bug" value="http://bugreport.java.com/bugreport/"/>
<property name="java.version" value="9.0.4"/>
<property name="java.vm.compressedOopsMode" value="32-bit"/>
<property name="java.vm.info" value="mixed mode"/>
<property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
<property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
<property name="java.vm.specification.vendor" value="Oracle Corporation"/>
<property name="java.vm.specification.version" value="9"/>
<property name="java.vm.vendor" value="Oracle Corporation"/>
<property name="java.vm.version" value="9.0.4+11"/>
<property name="jdk.debug" value="release"/>
<property name="line.separator" value="
"/>
<property name="os.arch" value="amd64"/>
<property name="os.name" value="Linux"/>
<property name="os.version" value="4.13.0-36-generic"/>
<property name="path.separator" value=":"/>
<property name="sun.arch.data.model" value="64"/>
<property name="sun.boot.library.path" value="/usr/lib/jvm/java-9-oracle/lib"/>
<property name="sun.cpu.endian" value="little"/>
<property name="sun.cpu.isalist" value=""/>
<property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
<property name="sun.java.command" value="org.junit.platform.console.ConsoleLauncher --details TREE --scan-class-path /home/anatoliy/IdeaProjects/tellus/tellus/airport/build/classes/java/main:/home/anatoliy/IdeaProjects/tellus/tellus/airport/build/resources/main:/home/anatoliy/IdeaProjects/tellus/tellus/airport/build/classes/java/test:/home/anatoliy/IdeaProjects/tellus/tellus/airport/build/resources/test -n ^.*Tests?$ -e junit-jupiter --reports-dir /home/anatoliy/IdeaProjects/tellus/tellus/airport/build/test-results/junit-platform"/>
<property name="sun.java.launcher" value="SUN_STANDARD"/>
<property name="sun.jnu.encoding" value="UTF-8"/>
<property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
<property name="sun.os.patch.level" value="unknown"/>
<property name="user.country" value="US"/>
<property name="user.dir" value="/home/anatoliy/IdeaProjects/tellus/tellus/airport"/>
<property name="user.home" value="/home/anatoliy"/>
<property name="user.language" value="en"/>
<property name="user.name" value="anatoliy"/>
<property name="user.timezone" value="Europe/Kiev"/>
<property name="user.variant" value=""/>
</properties>
<testcase name="deleteWhenBadConnectionThrowsDaoException()" classname="com.courses.airport.dao.AirDaoMockTest" time="1.982">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:deleteWhenBadConnectionThrowsDaoException()]
display-name: deleteWhenBadConnectionThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="newCustomerWhenConnectionFailedThrowsDaoException()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.157">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:newCustomerWhenConnectionFailedThrowsDaoException()]
display-name: newCustomerWhenConnectionFailedThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="getAllWhenEntryExistsReturnsListWithCustomer()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.174">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:getAllWhenEntryExistsReturnsListWithCustomer()]
display-name: getAllWhenEntryExistsReturnsListWithCustomer()
]]></system-out>
</testcase>
<testcase name="updateWhenBadConnectionThrowsDaoException()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.14">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:updateWhenBadConnectionThrowsDaoException()]
display-name: updateWhenBadConnectionThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="deleteWhenWhenEntryNotExistsReturns0()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.192">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:deleteWhenWhenEntryNotExistsReturns0()]
display-name: deleteWhenWhenEntryNotExistsReturns0()
]]></system-out>
</testcase>
<testcase name="updateWhenEntryNotExistsReturns0()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.195">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:updateWhenEntryNotExistsReturns0()]
display-name: updateWhenEntryNotExistsReturns0()
]]></system-out>
</testcase>
<testcase name="getByIdWhenBadConnectionThrowsDaoException()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.109">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:getByIdWhenBadConnectionThrowsDaoException()]
display-name: getByIdWhenBadConnectionThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="getByIdWhenEmptyResultSetReturnsOptionalEmpty()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.152">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:getByIdWhenEmptyResultSetReturnsOptionalEmpty()]
display-name: getByIdWhenEmptyResultSetReturnsOptionalEmpty()
]]></system-out>
</testcase>
<testcase name="getByIdWithExistingIdReturnsCustomer()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.09">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:getByIdWithExistingIdReturnsCustomer()]
display-name: getByIdWithExistingIdReturnsCustomer()
]]></system-out>
</testcase>
<testcase name="deleteWhenWhenEntryExistsReturns1()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.07">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:deleteWhenWhenEntryExistsReturns1()]
display-name: deleteWhenWhenEntryExistsReturns1()
]]></system-out>
</testcase>
<testcase name="insertWhenExecuteUpdatePositiveDataReturnsTrue()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.103">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:insertWhenExecuteUpdatePositiveDataReturnsTrue()]
display-name: insertWhenExecuteUpdatePositiveDataReturnsTrue()
]]></system-out>
</testcase>
<testcase name="getAllWhenBadConnectionThrowsDaoException()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.069">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:getAllWhenBadConnectionThrowsDaoException()]
display-name: getAllWhenBadConnectionThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="insertWhenBadConnectionThrowsDAOException()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.068">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:insertWhenBadConnectionThrowsDAOException()]
display-name: insertWhenBadConnectionThrowsDAOException()
]]></system-out>
</testcase>
<testcase name="updateWhenEntryExistsReturns1()" classname="com.courses.airport.dao.AirDaoMockTest" time="0.079">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirDaoMockTest]/[method:updateWhenEntryExistsReturns1()]
display-name: updateWhenEntryExistsReturns1()
]]></system-out>
</testcase>
<testcase name="getByIdWhenTableNotExistsThrowsDaoException()" classname="com.courses.airport.dao.AirportDaoTest" time="6.011">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:getByIdWhenTableNotExistsThrowsDaoException()]
display-name: getByIdWhenTableNotExistsThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="getAllWhenTableHasDataReturnsListOfCustomers()" classname="com.courses.airport.dao.AirportDaoTest" time="0.079">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:getAllWhenTableHasDataReturnsListOfCustomers()]
display-name: getAllWhenTableHasDataReturnsListOfCustomers()
]]></system-out>
</testcase>
<testcase name="updateWhenTableNotExistsThrowsDaoException()" classname="com.courses.airport.dao.AirportDaoTest" time="0.027">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:updateWhenTableNotExistsThrowsDaoException()]
display-name: updateWhenTableNotExistsThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="deleteWithNotExistingReturns0()" classname="com.courses.airport.dao.AirportDaoTest" time="0.015">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:deleteWithNotExistingReturns0()]
display-name: deleteWithNotExistingReturns0()
]]></system-out>
</testcase>
<testcase name="insertWhenTableNotExistsThrowsDaoException()" classname="com.courses.airport.dao.AirportDaoTest" time="0.013">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:insertWhenTableNotExistsThrowsDaoException()]
display-name: insertWhenTableNotExistsThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="getByIdWithExistingIdReturnsCustomer()" classname="com.courses.airport.dao.AirportDaoTest" time="0.011">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:getByIdWithExistingIdReturnsCustomer()]
display-name: getByIdWithExistingIdReturnsCustomer()
]]></system-out>
</testcase>
<testcase name="insertWithValidDataReturnsTrue()" classname="com.courses.airport.dao.AirportDaoTest" time="0.016">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:insertWithValidDataReturnsTrue()]
display-name: insertWithValidDataReturnsTrue()
]]></system-out>
</testcase>
<testcase name="deleteWithExistingIdReturns1()" classname="com.courses.airport.dao.AirportDaoTest" time="0.011">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:deleteWithExistingIdReturns1()]
display-name: deleteWithExistingIdReturns1()
]]></system-out>
</testcase>
<testcase name="deleteWhenTableNotExistsThrowsDaoException()" classname="com.courses.airport.dao.AirportDaoTest" time="0.016">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:deleteWhenTableNotExistsThrowsDaoException()]
display-name: deleteWhenTableNotExistsThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="getAllWhenTableNotExistsThrowsDaoException()" classname="com.courses.airport.dao.AirportDaoTest" time="0.017">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:getAllWhenTableNotExistsThrowsDaoException()]
display-name: getAllWhenTableNotExistsThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="updateWhenEntryExistsReturnsTrue()" classname="com.courses.airport.dao.AirportDaoTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:updateWhenEntryExistsReturnsTrue()]
display-name: updateWhenEntryExistsReturnsTrue()
]]></system-out>
</testcase>
<testcase name="getByIdWithNotExistingIdReturnsOptionalEmpty()" classname="com.courses.airport.dao.AirportDaoTest" time="0.01">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:getByIdWithNotExistingIdReturnsOptionalEmpty()]
display-name: getByIdWithNotExistingIdReturnsOptionalEmpty()
]]></system-out>
</testcase>
<testcase name="getAllWhenTableHasNoDataReturnsEmptyList()" classname="com.courses.airport.dao.AirportDaoTest" time="0.014">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:getAllWhenTableHasNoDataReturnsEmptyList()]
display-name: getAllWhenTableHasNoDataReturnsEmptyList()
]]></system-out>
</testcase>
<testcase name="updateWhenEntryNotExistsReturnsFalse()" classname="com.courses.airport.dao.AirportDaoTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.AirportDaoTest]/[method:updateWhenEntryNotExistsReturnsFalse()]
display-name: updateWhenEntryNotExistsReturnsFalse()
]]></system-out>
</testcase>
<testcase name="removeByIdWithNegativeIdThrowsDaoException()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.027">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:removeByIdWithNegativeIdThrowsDaoException()]
display-name: removeByIdWithNegativeIdThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="findByIdWithNegativeIdThrowsDaoException()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.015">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:findByIdWithNegativeIdThrowsDaoException()]
display-name: findByIdWithNegativeIdThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="updateWhenBadConnectionThrowsDaoException()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.025">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:updateWhenBadConnectionThrowsDaoException()]
display-name: updateWhenBadConnectionThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="removeByIdWhenBadConnectionThrowsDaoException()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.022">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:removeByIdWhenBadConnectionThrowsDaoException()]
display-name: removeByIdWhenBadConnectionThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="findAllWhenBadConnectionThrowsDaoException()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.015">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:findAllWhenBadConnectionThrowsDaoException()]
display-name: findAllWhenBadConnectionThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="findByIdWhenBadConnectionThrowsDaoException()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.018">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:findByIdWhenBadConnectionThrowsDaoException()]
display-name: findByIdWhenBadConnectionThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="insertWhenExecuteUpdatePositiveDataReturnsTrue()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.055">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:insertWhenExecuteUpdatePositiveDataReturnsTrue()]
display-name: insertWhenExecuteUpdatePositiveDataReturnsTrue()
]]></system-out>
</testcase>
<testcase name="findByIdWithExistingIdReturnsTicket()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.059">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:findByIdWithExistingIdReturnsTicket()]
display-name: findByIdWithExistingIdReturnsTicket()
]]></system-out>
</testcase>
<testcase name="insertWhenBadConnectionThrowsDAOException()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.018">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:insertWhenBadConnectionThrowsDAOException()]
display-name: insertWhenBadConnectionThrowsDAOException()
]]></system-out>
</testcase>
<testcase name="insertWhenExecuteUpdateNegativeDataReturnsTrue()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.047">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:insertWhenExecuteUpdateNegativeDataReturnsTrue()]
display-name: insertWhenExecuteUpdateNegativeDataReturnsTrue()
]]></system-out>
</testcase>
<testcase name="findByIdWhenEmptyResultSetReturnsNull()" classname="com.courses.airport.dao.TicketDaoMockTest" time="0.057">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketDaoMockTest]/[method:findByIdWhenEmptyResultSetReturnsNull()]
display-name: findByIdWhenEmptyResultSetReturnsNull()
]]></system-out>
</testcase>
<testcase name="findAllWhenTableHasDataReturnsListOfTickets()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.079">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:findAllWhenTableHasDataReturnsListOfTickets()]
display-name: findAllWhenTableHasDataReturnsListOfTickets()
]]></system-out>
</testcase>
<testcase name="removeByIdWithNegativeIdThrowsDaoException()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.014">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:removeByIdWithNegativeIdThrowsDaoException()]
display-name: removeByIdWithNegativeIdThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="removeByIdWithNotExistingReturnsFalse()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.016">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:removeByIdWithNotExistingReturnsFalse()]
display-name: removeByIdWithNotExistingReturnsFalse()
]]></system-out>
</testcase>
<testcase name="findByIdWithNegativeIdThrowsDaoException()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.014">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:findByIdWithNegativeIdThrowsDaoException()]
display-name: findByIdWithNegativeIdThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="removeByIdWithExistingIdReturnsTrue()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.015">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:removeByIdWithExistingIdReturnsTrue()]
display-name: removeByIdWithExistingIdReturnsTrue()
]]></system-out>
</testcase>
<testcase name="insertWhenTicketHasNullElementThrowsDAOException()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.015">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:insertWhenTicketHasNullElementThrowsDAOException()]
display-name: insertWhenTicketHasNullElementThrowsDAOException()
]]></system-out>
</testcase>
<testcase name="insertWhenTicketIsNullThrowsDaoException()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:insertWhenTicketIsNullThrowsDaoException()]
display-name: insertWhenTicketIsNullThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="findAllWhenTableHasNoDataReturnsEmptyList()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:findAllWhenTableHasNoDataReturnsEmptyList()]
display-name: findAllWhenTableHasNoDataReturnsEmptyList()
]]></system-out>
</testcase>
<testcase name="insertWithValidDataReturnsTrue()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.01">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:insertWithValidDataReturnsTrue()]
display-name: insertWithValidDataReturnsTrue()
]]></system-out>
</testcase>
<testcase name="updateWhenEntryExistsReturnsTrue()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.016">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:updateWhenEntryExistsReturnsTrue()]
display-name: updateWhenEntryExistsReturnsTrue()
]]></system-out>
</testcase>
<testcase name="findByIdWithNotExistingIdReturnsNull()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.011">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:findByIdWithNotExistingIdReturnsNull()]
display-name: findByIdWithNotExistingIdReturnsNull()
]]></system-out>
</testcase>
<testcase name="findByIdWithExistingIdReturnsTicket()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.014">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:findByIdWithExistingIdReturnsTicket()]
display-name: findByIdWithExistingIdReturnsTicket()
]]></system-out>
</testcase>
<testcase name="updateWhenTicketIsNullThrowsDaoException()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.011">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:updateWhenTicketIsNullThrowsDaoException()]
display-name: updateWhenTicketIsNullThrowsDaoException()
]]></system-out>
</testcase>
<testcase name="updateWhenEntryNotExistsReturnsFalse()" classname="com.courses.airport.dao.TicketsDaoTest" time="0.015">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:com.courses.airport.dao.TicketsDaoTest]/[method:updateWhenEntryNotExistsReturnsFalse()]
display-name: updateWhenEntryNotExistsReturnsFalse()
]]></system-out>
</testcase>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]
display-name: JUnit Jupiter
]]></system-out>
</testsuite>
