package tests;

import main.java.DAO.TicketDAO;
import main.java.MySQLConnection.MainConnection;
import main.java.essences.Ticket;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class TicketDAOTests {
    @Before
    public void testingDriverManager () { // Checking if mysql-connector is uploaded to the project
        boolean thrown = false;
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println("Can't find mysql-connector in current project...");
            thrown = true;
        } finally {
            assertFalse(thrown);
        }
    }

    @Test
    public void testDbConnection () { // Checking if the connection to remote Db works properly
        MainConnection mainConnection = null;
        mainConnection = new MainConnection();
        assertNotNull(mainConnection.getConnection());
    }

    @Test
    public void createTicket() {
        TicketDAO ticketDAO = new TicketDAO();
        int testTicketId = ticketDAO.getLastId() + 1;   // Id of created object is +1 from the previus raw id
        Ticket ticket = new Ticket(testTicketId,"FFld", "Dmytro", "Kaminskyi", "2018-03-23", "Kiev", "Krizopil", "Boing");
        ticketDAO.createTicket(ticket); //  Inserting our ticket to Db
        Ticket uploadedTicket = ticketDAO.getTicketById(testTicketId);  //  Uploading created ticket from Db
        assertTrue(ticket.getTicketCode().equals(uploadedTicket.getTicketCode()));  // Comparing uploaded ticket with original
    }

    @Test
    public void getTicketById() {
        TicketDAO ticketDAO = new TicketDAO();
        int testTicketId = ticketDAO.getLastId();
        Ticket uploadedTicket = ticketDAO.getTicketById(testTicketId); // Uploading last ticket in the table from db
        assertTrue(uploadedTicket.getTicketCode() != null); // Checking if ticket code is not null
    }

    @Test
    public void updateTicket() {
        TicketDAO ticketDAO = new TicketDAO();
        int testTicketId = ticketDAO.getLastId();
        Ticket ticketBeforeUpdate = ticketDAO.getTicketById(testTicketId);  // Uploading last ticket in the table from db
        ticketBeforeUpdate.setTicketCode("666");    // Changing uploaded ticket - "ticket code = 666"
        ticketDAO.updateTicket(testTicketId, ticketBeforeUpdate);   //  updating original ticket in db with our new ticket data
        Ticket ticketAfterUpdate = ticketDAO.getTicketById(testTicketId);   // Uploading updated row from db and checking updates
        assertTrue(ticketAfterUpdate.getTicketCode().equals(ticketBeforeUpdate.getTicketCode()));
    }

    @Test
    public void deleteTicket() {
        TicketDAO ticketDAO = new TicketDAO();
        int testTicketId = ticketDAO.getLastId();   // Checking the id of last raw before delete operation
        ticketDAO.deleteTicket(testTicketId);
        assertFalse(testTicketId == ticketDAO.getLastId()); // id of the last raw before and after delete operation must not be equal
    }

}