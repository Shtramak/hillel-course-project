apply plugin: 'checkstyle'
//apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jdepend'
apply plugin: "jacoco"
apply plugin: 'com.palantir.jacoco-coverage'
apply plugin: 'org.junit.platform.gradle.plugin'

checkstyle {
    ignoreFailures = false
    configProperties.samedir = "${rootProject.projectDir}/buildSrc/checkstyle"
    sourceSets = [sourceSets.main]
    configFile = new File("${rootProject.projectDir}/buildSrc/checkstyle/checkstyle.xml")
    //toolVersion = "8.8"
    //checkstyleMain.source = "src/main/java/com/courses/tellus"
}


pmd {
    toolVersion = "6.1.0"
    consoleOutput = true
    sourceSets = [sourceSets.main]
    ruleSetFiles = rootProject.files('buildSrc/pmd/pmd_checks.xml')
}

//findbugs {
//    toolVersion = "3.0.1"
//    sourceSets = [sourceSets.main]
//    effort = "max"
//    reportLevel = "high"
//    excludeFilter = file("${rootProject.projectDir}/buildSrc/findbugs/exclude.xml")
//}

jdepend {
    toolVersion = "2.9.1"
    sourceSets = [sourceSets.main]
}

//tasks.withType(FindBugs) {
//    reports {
//        xml.enabled false
//        html.enabled true
//    }
//}

jacoco {
    toolVersion = "0.8.0"
    applyTo junitPlatformTest
}

test {
    junitPlatformTest {
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination "${buildDir}/jacocoHtml"
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
<<<<<<< HEAD
            fileTree(dir: it, exclude: ['**/model/**', '**/servlets/**', '**/entity/**', '**/*Main*.*','**/roman/**'])
=======
            fileTree(dir: it, exclude: ['**/model/**', '**/connection/**', '**/config/**', '**/entity/**',
                                        '**/*Main*/**', '**/roman/**'])
>>>>>>> TEL-36-autosalon-module-servlets
        })
    }
}

jacocoCoverage {
    // Enforce minimum code coverage of 90% for every Java file.
    fileThreshold 0.9
    fileThreshold 0.9, LINE
    fileThreshold 0.9, COMPLEXITY
    fileThreshold 0.9, METHOD
}

check.dependsOn test